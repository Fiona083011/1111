package comp1110.mse;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.Timeout;

import java.util.Arrays;

import static org.junit.Assert.assertEquals;

public class Q1AboveTest {
    static final double DELTA = 1e-8;
    @Rule
    public Timeout globalTimeout = Timeout.millis(500);

    private void test(double[] values, double threshold, double expected) {
        double out = Q1Above.above(values, threshold);
        assertEquals("Expected " + expected + " but got " + out + " for threshold " + threshold + ", and values " + Arrays.toString(values), expected, out, DELTA);
    }

    @Test
    public void testNull() {
        test(null, 0, 0);
    }

    @Test
    public void testEmpty() {
        double[] v = {};
        test(v, 0, 0);
    }

    @Test
    public void testSimple() {
        double[] v = {0, 1.0, 0, 4.0, 0, 3.0, 2.0};
        test(v, 0, 12);
        test(v, 1, 24);
        test(v, 2, 12);
        test(v, 3, 4);
        test(v, 4, 0);
    }

    @Test
    public void medium() {
        double[] v0 = {-2.0, -4.5, -2.0, 2.0, 2.5, 0.5, -2.5, -0.5, 3.5, 2.0};
        test(v0, -2.0, 2.5);
        double[] v1 = {-1.5, 0.5, 1.0, 1.0, 2.5, 0.5, 4.0, 1.0, -2.5, 1.0};
        test(v1, 0.0, 0.5);
        double[] v2 = {-1.5, -3.5, 3.5, 0.5, -0.0, -4.0, -3.0, 1.5, -2.5, 3.0};
        test(v2, -1.5, -0.0);
        double[] v3 = {-2.0, 1.5, 3.0, -3.5, 2.5, 2.0, 1.5, -0.0, 2.0, 4.5};
        test(v3, 1.5, 15.0);
        double[] v4 = {1.5, 0.5, -2.5, 4.5, -0.5, -0.0, -1.5, -4.0, 1.5, 1.5};
        test(v4, 0.0, 3.375);
        double[] v5 = {3.5, 4.5, -1.5, -0.5, -0.0, 1.0, -0.0, -2.0, 1.5, 0.0};
        test(v5, -1.5, -7.875);
        double[] v6 = {2.0, -4.5, -3.5, -1.5, 0.5, -3.0, 4.5, 4.5, 4.0, 1.5};
        test(v6, 0.0, 4.5);
        double[] v7 = {-2.5, 0.0, 2.0, 0.0, -2.0, -4.0, -3.5, -0.5, 2.0, 2.5};
        test(v7, -2.0, 0.0);
        double[] v8 = {1.5, 1.5, 1.5, -0.0, 3.0, 2.5, -2.5, -1.0, -2.0, -2.5};
        test(v8, -0.5, 3.375);
        double[] v9 = {4.5, -0.0, 4.0, 4.0, 0.5, -3.0, -3.0, -0.5, 2.0, 2.0};
        test(v9, 3.5, 72.0);
    }

    @Test
    public void longer() {
        double[] v0 = {-7.5, -1.0, 17.5, -13.5, 18.5, -14.0, 15.0, 2.5, -14.0, -1.0, -14.0, -9.5, -2.5, -2.5, 12.5, 7.5, 3.5, 0.5, -1.5, 19.5, -16.0, 13.5, -2.0, -16.0, -0.5, 5.5, 17.5, -14.0, 2.5, -5.5, -19.0, 14.5, 1.0, -10.5, 9.5, 7.5, -11.0, -4.0, 1.0, 16.5};
        test(v0, 0.5, 4856.25);
        double[] v1 = {9.0, -10.0, -6.0, 13.0, 3.5, -3.0, 17.0, -13.5, -0.0, 19.0, -3.5, 9.5, 10.5, 18.0, -13.5, -14.0, -17.5, -5.0, -3.0, 4.5, -3.0, 18.0, 17.0, -3.5, 16.0, 16.5, -10.0, 2.5, -15.5, 19.5, -5.5, 6.0, 13.0, 9.0, -19.5, -19.0, 10.0, 6.5, 17.0, 5.0};
        test(v1, -3.5, 409.5);
        double[] v2 = {-19.0, -1.0, -19.0, 5.0, -15.0, 10.0, -13.5, -14.0, 11.5, -17.0, 14.5, -10.5, 5.5, -15.0, -0.0, 1.5, -9.5, -18.0, -17.5, 1.0, -10.5, -1.5, -0.0, -1.5, -18.5, 14.0, 12.5, 19.0, 18.0, 4.5, 14.0, -11.5, -13.5, 19.5, 0.0, 14.0, 12.5, -14.0, 7.0, 14.0};
        test(v2, 14.0, 4959.0);
        double[] v3 = {16.5, 0.0, -12.5, -14.0, -12.0, 10.0, 11.0, 5.5, 7.0, -16.5, 9.0, -14.5, 9.0, -16.0, 17.5, 10.0, -10.0, -2.0, -13.5, 10.5, -7.0, 5.0, -11.0, 18.5, 3.0, -16.5, -8.5, -10.5, -0.5, -9.5, 14.0, -15.0, 4.5, -1.0, 16.5, 2.5, 16.0, -5.5, 13.0, 11.5};
        test(v3, -15.0, -0.0);
        double[] v4 = {14.5, 19.0, -3.0, 11.0, -13.0, -14.0, -0.5, 2.5, -18.5, 2.5, -11.5, -4.5, 9.0, -3.0, 14.5, -7.5, -8.5, 17.5, 5.0, -18.5, -5.5, -6.5, -17.0, 6.0, 9.5, 14.5, -8.0, 11.0, -6.5, 15.0, 0.5, -0.0, -8.5, -11.0, 19.5, -0.5, -8.0, 6.0, -10.0, -8.5};
        test(v4, 17.5, 370.5);
        double[] v5 = {-1.5, -1.0, -9.0, -7.0, -6.5, -4.5, 5.0, -8.5, -0.5, -16.5, 19.5, -19.5, 3.0, -17.5, -12.5, -17.5, 14.0, 17.5, -9.0, 13.0, 16.5, -8.0, -4.5, -18.0, 5.0, -13.0, 5.0, -16.5, -14.5, 13.5, 3.5, -6.5, 14.5, -11.0, 1.0, 14.5, -14.5, -1.5, 12.0, 3.5};
        test(v5, -11.5, -13.5);
        double[] v6 = {4.0, -3.5, -18.5, 7.0, 12.0, 7.5, 17.0, -0.5, -12.0, 18.5, 1.0, -14.5, 6.0, 17.5, -3.0, 17.0, 7.0, 0.5, -15.0, 19.0, -15.5, 7.5, -10.0, 9.5, -10.0, -3.5, -19.5, -14.5, 12.5, -15.5, 10.5, -8.5, 16.5, -18.5, -11.5, 7.5, 17.5, -8.0, -16.0, 8.5};
        test(v6, -14.5, -98.0);
        double[] v7 = {-10.5, 15.0, -16.5, -3.0, -8.0, -19.5, -11.0, 17.5, -7.0, -14.5, 15.5, -0.5, 12.5, 13.0, -2.5, -1.0, 17.5, 10.0, -18.5, -18.5, 8.5, -4.5, 2.0, -5.0, -8.5, -2.0, 12.0, -14.0, 2.0, 7.0, 2.5, 2.5, -14.0, -14.5, -2.5, -14.0, 11.0, 3.5, 7.0, 1.0};
        test(v7, -11.5, 472.5);
        double[] v8 = {7.5, 8.0, -8.0, -6.5, 19.5, 2.0, -9.0, 6.5, 14.0, -6.5, 15.0, -14.0, -2.5, -1.0, 18.5, 17.5, -10.0, 5.0, -12.5, 0.5, 9.0, 15.0, -6.5, -0.5, 15.0, -4.5, -4.0, 3.5, 3.5, -13.5, -4.5, -9.0, -10.5, -16.5, 5.5, -17.5, 9.5, -3.0, -1.0, -10.0};
        test(v8, 14.5, 5411.25);
        double[] v9 = {3.0, -14.0, 1.0, -8.0, -6.5, -12.5, -1.5, 15.5, -17.5, -1.5, 12.0, 7.0, -1.0, 11.0, 2.0, 1.5, 11.0, 16.0, 9.0, -6.5, 13.5, 13.0, -17.0, -6.5, 1.5, -18.0, 6.0, 3.5, -2.5, -6.0, -9.0, 15.0, 15.0, -19.5, 5.0, 5.0, 17.5, -11.0, 5.0, 2.5};
        test(v9, 17.0, 17.5);
    }
}